"use client"

import { useEffect, useState } from "react"
import { useRouter, useParams } from "next/navigation"
import { DashboardLayout } from "@/components/dashboard-layout"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import {
  Calendar,
  FileText,
  Users,
  Activity,
  ArrowLeft,
  Pill,
  TestTube,
  HeartPulse,
  MessageCircle,
  UserPlus
} from "lucide-react"
import { getReceptionNavigation } from "@/lib/navigation/reception-navigation"

// --- Interfaces ƒë·ªãnh nghƒ©a c·∫•u tr√∫c d·ªØ li·ªáu ---

interface Appointment {
  appointmentId: number
  appointmentDate: string
  doctorId: number
  patientId: number
  status: string
  reasonForVisit?: string
  // Th√™m c√°c tr∆∞·ªùng hi·ªÉn th·ªã nh∆∞ trong code chi ti·∫øt ban ƒë·∫ßu (c√≥ th·ªÉ t·ª´ API kh√°c ho·∫∑c ƒë∆∞·ª£c g·ªôp v√†o)
  doctorName?: string
  doctorSpecialty?: string
}

interface InternalMedRecord {
  bloodPressure?: number
  heartRate?: number
  bloodSugar?: number
  notes?: string
}

interface Prescription {
  medicationName: string
  dosage: string
  instructions: string
}

interface TestResult {
  testName: string
  resultValue: string
  notes?: string
}

interface Payment {
  amount: number
  paymentDate: string
  method: string
  status: string
}

interface MedicalRecord {
  recordId: number
  doctorNotes: string
  diagnosis: string
  createdAt: string
  appointmentId: number
  appointment: Appointment // ƒê·∫£m b·∫£o tr∆∞·ªùng n√†y lu√¥n c√≥
  internalMedRecord?: InternalMedRecord
  prescriptions?: Prescription[] // ƒê·∫£m b·∫£o l√† m·∫£ng c√°c Prescription
  testResults?: TestResult[] // ƒê·∫£m b·∫£o l√† m·∫£ng c√°c TestResult
  payments?: Payment[] // ƒê·∫£m b·∫£o l√† m·∫£ng c√°c Payment
}

interface PatientDetail {
  fullName: string
  gender: string
  dob: string
  phone: string
  email: string
  allergies: string
  medicalHistory: string
}
interface AppointmentDetail {
  appointmentDate: string
  patientName: string
  patientPhone: string
  doctorName: string
  doctorSpecialty: string
  status: string
  reasonForVisit: string
}

export default function MedicalRecordDetailPage() {
  // Get reception navigation from centralized config
  const navigation = getReceptionNavigation()

  const router = useRouter()
  const params = useParams()
  // √âp ki·ªÉu id t·ª´ params
  const id = params?.id ? String(params.id) : null

  const [record, setRecord] = useState<MedicalRecord | null>(null)
  const [patientInfo, setPatientInfo] = useState<PatientDetail | null>(null)
  const [appointmentInfo, setAppointmentInfo] = useState<AppointmentDetail | null>(null)
  const [loading, setLoading] = useState(true)
  const [patientCache, setPatientCache] = useState<Record<number, PatientDetail>>({})
  const [appointmentCache, setAppointmentCache] = useState<Record<number, AppointmentDetail>>({})
  useEffect(() => {
    if (!id) return
    const fetchRecord = async () => {
      try {
        // L·∫•y h·ªì s∆° b·ªánh √°n
        const res = await fetch(`https://localhost:7168/api/MedicalRecord/${id}`)
        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu h·ªì s∆°.")
        const data: MedicalRecord = await res.json()
        setRecord(data)

        let appointmentInfo = appointmentCache[data?.appointment?.appointmentId]
        if (!appointmentInfo) {
          const aRes = await fetch(`https://localhost:7168/api/Appointments/${data?.appointment?.appointmentId}`)
          appointmentInfo = await aRes.json()
          setAppointmentCache((prev) => ({ ...prev, [data?.appointment?.appointmentId]: appointmentInfo }))
        }
        // --- L·∫•y th√¥ng tin b·ªánh nh√¢n t·ª´ b·∫£ng Users ---
        const patientId = data?.appointment?.patientId
        if (patientId) {
          let patientData = patientCache[patientId]
          try {
            // üîπ 1. L·∫•y th√¥ng tin t·ª´ b·∫£ng Patient
            const pRes = await fetch(`https://localhost:7168/api/Patient/${patientId}`);
            if (!pRes.ok) throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu Patient");

            const patient = await pRes.json();

            // üîπ 2. L·∫•y th√¥ng tin User t·ª´ userId c·ªßa Patient
            const userId = patient?.userId;
            if (!userId) throw new Error("Kh√¥ng t√¨m th·∫•y userId trong Patient");

            const uRes = await fetch(`https://localhost:7168/api/Users/${userId}`);
            if (!uRes.ok) throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu User");

            const userData = await uRes.json();

            // üîπ 3. G·ªôp d·ªØ li·ªáu Patient v√† User (tu·ª≥ √Ω)
            patientData = { ...patient, ...userData };

            // üîπ 4. L∆∞u v√†o cache
            setPatientCache((prev) => ({ ...prev, [patientId]: patientData }));
          } catch (error) {
            console.error("L·ªói khi l·∫•y th√¥ng tin b·ªánh nh√¢n:", error);
          }
          setPatientInfo(patientData)
          setAppointmentInfo(appointmentInfo)
        }
      } catch (error) {
        console.error(error)
        setRecord(null) // ƒê·∫£m b·∫£o record l√† null n·∫øu c√≥ l·ªói t·∫£i
      } finally {
        setLoading(false)
      }
    }
    fetchRecord()
  }, [id])

  if (loading) {
    return (
      <DashboardLayout navigation={navigation}>
        <div className="text-center py-12 text-muted-foreground">
          ƒêang t·∫£i d·ªØ li·ªáu...
        </div>
      </DashboardLayout>
    )
  }

  if (!record) {
    return (
      <DashboardLayout navigation={navigation}>
        <div className="text-center py-12">
          <p className="text-muted-foreground">Kh√¥ng t√¨m th·∫•y h·ªì s∆° b·ªánh √°n</p>
          <Button className="mt-4" onClick={() => router.push("/reception/records")}>
            <ArrowLeft className="h-4 w-4 mr-2" /> Quay l·∫°i danh s√°ch
          </Button>
        </div>
      </DashboardLayout>
    )
  }

  // Khai b√°o c√°c bi·∫øn an to√†n h∆°n v·ªõi Optional Chaining v√† gi√° tr·ªã m·∫∑c ƒë·ªãnh
  const appointment = record.appointment
  const med = record.internalMedRecord
  const prescriptions = record.prescriptions || []
  const testResults = record.testResults || []
  const payments = record.payments || []

  return (
    <DashboardLayout navigation={navigation}>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center gap-4">
          <Button variant="ghost" size="icon" onClick={() => router.back()}>
            <ArrowLeft className="h-5 w-5" />
          </Button>
          <div className="flex-1">
            <h1 className="text-3xl font-bold tracking-tight">Chi ti·∫øt h·ªì s∆° b·ªánh √°n</h1>
            <p className="text-muted-foreground">M√£ h·ªì s∆°: #{record.recordId}</p>
          </div>
          <Badge variant={appointment?.status === "Confirmed" ? "default" : "secondary"}>
            {appointment?.status || "Ch∆∞a r√µ"}
          </Badge>
        </div>

        <div className="grid gap-6 md:grid-cols-3">
          {/* Patient Info */}
          <Card className="md:col-span-1">
            <CardHeader>
              <CardTitle>Th√¥ng tin b·ªánh nh√¢n</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3 text-sm">
              <p><strong>H·ªç t√™n:</strong> {patientInfo?.fullName || "‚Äî"}</p>
              <p><strong>Gi·ªõi t√≠nh:</strong> {patientInfo?.gender || "‚Äî"}</p>
              <p><strong>Ng√†y sinh:</strong> {patientInfo?.dob ? new Date(patientInfo.dob).toLocaleDateString("vi-VN") : "‚Äî"}</p>
              <p><strong>SƒêT:</strong> {patientInfo?.phone || "‚Äî"}</p>
              <p><strong>Email:</strong> {patientInfo?.email || "‚Äî"}</p>
              <p><strong>D·ªã ·ª©ng:</strong> {patientInfo?.allergies || "Kh√¥ng c√≥"}</p>
              <p><strong>Ti·ªÅn s·ª≠ b·ªánh:</strong> {patientInfo?.medicalHistory || "Kh√¥ng c√≥"}</p>
            </CardContent>
          </Card>

          {/* Record Info & Sub-sections */}
          <div className="md:col-span-2 space-y-6">
            {/* Th√¥ng tin kh√°m b·ªánh (Appointment/Diagnosis) */}
            <Card>
              <CardHeader>
                <CardTitle>Th√¥ng tin kh√°m b·ªánh</CardTitle>
                <CardDescription>
                  {appointmentInfo?.appointmentDate
                    ? `Ng√†y: ${new Date(appointmentInfo.appointmentDate).toLocaleDateString("vi-VN")}`
                    : "Kh√¥ng r√µ ng√†y kh√°m"}
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-3 text-sm">
                <p><strong>B√°c sƒ© ph·ª• tr√°ch:</strong> {appointmentInfo?.doctorName || "‚Äî"}</p>
                <p><strong>Chuy√™n khoa:</strong> {appointmentInfo?.doctorSpecialty || "‚Äî"}</p>
                <Separator className="my-3" />
                <p><strong>L√Ω do kh√°m:</strong> {appointmentInfo?.reasonForVisit || "‚Äî"}</p>
                <p><strong>Ch·∫©n ƒëo√°n:</strong> {record.diagnosis || "‚Äî"}</p>
                <p><strong>Ghi ch√∫ b√°c sƒ©:</strong> {record.doctorNotes || "‚Äî"}</p>
              </CardContent>
            </Card>

            {/* Internal Medicine Record */}
            {med && (
              <Card>
                <CardHeader>
                  <CardTitle>Ch·ªâ s·ªë n·ªôi khoa</CardTitle>
                </CardHeader>
                <CardContent className="grid grid-cols-2 md:grid-cols-3 gap-4 text-sm">
                  {med.bloodPressure && (
                    <Badge variant="outline" className="justify-center">
                      <HeartPulse className="w-4 h-4 mr-1" /> Huy·∫øt √°p: {med.bloodPressure} mmHg
                    </Badge>
                  )}
                  {med.heartRate && <Badge variant="outline" className="justify-center">Nh·ªãp tim: {med.heartRate} bpm</Badge>}
                  {med.bloodSugar && <Badge variant="outline" className="justify-center">ƒê∆∞·ªùng huy·∫øt: {med.bloodSugar} mg/dL</Badge>}
                  {med.notes && <p className="col-span-full text-muted-foreground pt-2">Ghi ch√∫: {med.notes}</p>}
                </CardContent>
              </Card>
            )}

            {/* Prescriptions
            {prescriptions.length > 0 && (
              <Card>
                <CardHeader>
                  <div className="flex items-center gap-2">
                    <Pill className="h-5 w-5 text-primary" />
                    <CardTitle>ƒê∆°n thu·ªëc ({prescriptions.length})</CardTitle>
                  </div>
                </CardHeader>
                <CardContent className="space-y-3">
                  {prescriptions.map((p: Prescription, idx: number) => (
                    <div key={idx} className="border rounded-lg p-3">
                      <p className="font-medium">{p.medicationName || "Thu·ªëc kh√¥ng x√°c ƒë·ªãnh"}</p>
                      <p className="text-sm text-muted-foreground">Li·ªÅu d√πng: {p.dosage || "‚Äî"}</p>
                      <p className="text-sm text-muted-foreground">Ghi ch√∫: {p.instructions || "‚Äî"}</p>
                    </div>
                  ))}
                </CardContent>
              </Card>
            )} */}

            {/* Test Results */}
            {testResults.length > 0 && (
              <Card>
                <CardHeader>
                  <div className="flex items-center gap-2">
                    <TestTube className="h-5 w-5 text-primary" />
                    <CardTitle>K·∫øt qu·∫£ x√©t nghi·ªám ({testResults.length})</CardTitle>
                  </div>
                </CardHeader>
                <CardContent className="space-y-3">
                  {testResults.map((t: TestResult, idx: number) => (
                    <div key={idx} className="border rounded-lg p-3">
                      <p className="font-medium">{t.testName || "Kh√¥ng r√µ x√©t nghi·ªám"}</p>
                      <p className="text-sm text-muted-foreground">K·∫øt qu·∫£: {t.resultValue || "‚Äî"}</p>
                      {t.notes && <p className="text-sm text-muted-foreground">Ghi ch√∫: {t.notes}</p>}
                    </div>
                  ))}
                </CardContent>
              </Card>
            )}

            {/* Payments */}
            {payments.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle>Thanh to√°n ({payments.length})</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  {payments.map((pay: Payment, idx: number) => (
                    <div key={idx} className="border rounded-lg p-3">
                      {/* S·ª≠ d·ª•ng optional chaining v√† ki·ªÉm tra t·ªìn t·∫°i c·ªßa amount */}
                      <p className="font-medium">S·ªë ti·ªÅn: {pay.amount?.toLocaleString("vi-VN") || "0"}‚Ç´</p>
                      <p className="text-sm text-muted-foreground">Ng√†y: {new Date(pay.paymentDate).toLocaleDateString("vi-VN")}</p>
                      <p className="text-sm text-muted-foreground">Ph∆∞∆°ng th·ª©c: {pay.method}</p>
                      <p className="text-sm text-muted-foreground">Tr·∫°ng th√°i: {pay.status}</p>
                    </div>
                  ))}
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </DashboardLayout>
  )
}