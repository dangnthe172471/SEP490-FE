// lib/services/patient-service.ts
// Service ƒë·ªÉ g·ªçi API patients t·ª´ backend

import { getToken } from "@/lib/auth"

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || "https://localhost:7168"

interface SearchUserRequest {
    fullName?: string
    phone?: string
    email?: string
    role?: string
    isActive?: boolean
    pageNumber?: number
    pageSize?: number
}

interface SearchUserResponse {
    users: UserDto[]
    totalCount: number
    pageNumber: number
    pageSize: number
    totalPages: number
}

interface UserDto {
    userId: number
    phone?: string
    fullName?: string
    email?: string
    role?: string
    gender?: string
    dob?: string
    isActive: boolean
    // Patient specific fields
    allergies?: string
    medicalHistory?: string
}

interface PatientInfoDto {
    patientId: number
    userId: number
    fullName: string
    email: string
    phone: string
    allergies?: string
    medicalHistory?: string
}

class PatientService {
    async request<T>(endpoint: string, config: RequestInit = {}): Promise<T> {
        const token = getToken()

        if (!token) {
            throw new Error('Kh√¥ng t√¨m th·∫•y token. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.')
        }

        const url = `${API_BASE_URL}${endpoint}`

        const defaultConfig: RequestInit = {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`,
            },
        }

        const finalConfig = { ...defaultConfig, ...config }

        try {
            const response = await fetch(url, finalConfig)

            if (!response.ok) {
                const errorText = await response.text()
                // Graceful handling for expected 404s (e.g., user not mapped to patient yet)
                if (response.status === 404) {
                    throw new Error('HTTP 404')
                }
                if (response.status === 401) {
                    throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.')
                }
                throw new Error(`HTTP ${response.status}: ${errorText}`)
            }

            const data = await response.json()
            console.log('‚úÖ [PatientService] Success:', data)

            return data
        } catch (error) {
            // Avoid noisy error overlay; surface error to callers without console spam
            throw error
        }
    }

    /**
     * ‚úÖ T√¨m ki·∫øm b·ªánh nh√¢n
     * POST /api/Users/search
     * C·∫ßn role Administrator, Doctor, Receptionist
     */
    async searchPatients(request: SearchUserRequest): Promise<SearchUserResponse> {
        console.log('üîç [PatientService] Searching patients:', request)

        return this.request<SearchUserResponse>('/api/Users/search', {
            method: 'POST',
            body: JSON.stringify({
                ...request,
                role: 'Patient', // Ch·ªâ t√¨m b·ªánh nh√¢n
                isActive: true    // Ch·ªâ t√¨m b·ªánh nh√¢n ƒëang ho·∫°t ƒë·ªông
            })
        })
    }

    /**
     * ‚úÖ L·∫•y t·∫•t c·∫£ b·ªánh nh√¢n (c√≥ ph√¢n trang)
     * POST /api/Users/search v·ªõi role=Patient
     */
    async getAllPatients(pageNumber: number = 1, pageSize: number = 50): Promise<SearchUserResponse> {
        return this.searchPatients({
            pageNumber,
            pageSize
        })
    }

    /**
     * ‚úÖ T√¨m ki·∫øm b·ªánh nh√¢n theo t·ª´ kh√≥a
     * POST /api/Users/search v·ªõi fullName, phone, email
     */
    async searchPatientsByKeyword(keyword: string, pageNumber: number = 1, pageSize: number = 20): Promise<SearchUserResponse> {
        if (!keyword || keyword.trim().length < 2) {
            return {
                users: [],
                totalCount: 0,
                pageNumber: 1,
                pageSize: 20,
                totalPages: 0
            }
        }

        const trimmedKeyword = keyword.trim()

        return this.searchPatients({
            fullName: trimmedKeyword,
            phone: trimmedKeyword,
            email: trimmedKeyword,
            pageNumber,
            pageSize
        })
    }

    /**
     * ‚úÖ L·∫•y th√¥ng tin b·ªánh nh√¢n theo PatientID
     * GET /api/Appointments/patients/{id}
     */
    async getPatientById(patientId: number): Promise<PatientInfoDto> {
        return this.request<PatientInfoDto>(`/api/Appointments/patients/${patientId}`)
    }

    /**
     * ‚úÖ L·∫•y th√¥ng tin b·ªánh nh√¢n theo UserID
     * GET /api/Appointments/patients/user/{userId}
     */
    async getPatientByUserId(userId: number): Promise<PatientInfoDto> {
        return this.request<PatientInfoDto>(`/api/Appointments/patients/user/${userId}`)
    }

    /**
     * ‚úÖ L·∫•y t·∫•t c·∫£ b·ªánh nh√¢n t·ª´ database
     * S·ª≠ d·ª•ng endpoint /api/Users/patients ƒë·ªÉ l·∫•y t·∫•t c·∫£ b·ªánh nh√¢n
     */
    async getAllPatientsFromDatabase(): Promise<PatientInfoDto[]> {
        try {
            // L·∫•y t·∫•t c·∫£ b·ªánh nh√¢n t·ª´ endpoint /api/Users/patients
            const patientUsers = await this.request<UserDto[]>('/api/Users/patients')

            // Convert UserDto to PatientInfoDto
            const patientInfos: PatientInfoDto[] = []
            for (const user of patientUsers) {
                try {
                    // T√¨m PatientInfo t·ª´ UserId
                    const patientInfo = await this.getPatientByUserId(user.userId)
                    patientInfos.push(patientInfo)
                } catch (err) {
                    // Patient not found in Patient table, skip
                }
            }

            return patientInfos
        } catch (err: any) {
            console.error('‚ùå [ERROR] Failed to get all patients from database:', err)
            throw err
        }
    }

    /**
     * ‚úÖ Test method ƒë·ªÉ ki·ªÉm tra endpoint /api/Users/patients
     */
    async testGetAllPatients(): Promise<UserDto[]> {
        try {
            const result = await this.request<UserDto[]>('/api/Users/patients')
            return result
        } catch (err: any) {
            console.error('üß™ [PatientService] Test error:', err)
            throw err
        }
    }

    /**
     * ‚úÖ T√¨m ki·∫øm b·ªánh nh√¢n CH·ªà theo t√™n
     * POST /api/Users/search v·ªõi fullName only
     */
    async searchPatientsByKeywordWithAppointmentAPI(keyword: string): Promise<PatientInfoDto[]> {
        if (!keyword || keyword.trim().length < 2) {
            return []
        }

        const trimmedKeyword = keyword.trim()

        try {
            // Ch·ªâ search theo t√™n th√¥i (lo·∫°i b·ªè ID prefix n·∫øu c√≥)
            let searchTerm = trimmedKeyword

            // N·∫øu c√≥ format "ID - Name", ch·ªâ l·∫•y ph·∫ßn t√™n
            if (trimmedKeyword.includes(' - ')) {
                const parts = trimmedKeyword.split(' - ')
                if (parts.length >= 2) {
                    searchTerm = parts.slice(1).join(' - ') // L·∫•y ph·∫ßn sau " - "
                }
            }

            const response = await this.searchPatients({
                fullName: searchTerm, // CH·ªà search theo t√™n
                role: "Patient", // Ch·ªâ t√¨m b·ªánh nh√¢n
                isActive: true,
                pageNumber: 1,
                pageSize: 20
            })

            // Convert UserDto to PatientInfoDto
            const patientInfos: PatientInfoDto[] = []
            for (const user of response.users) {
                try {
                    // T√¨m PatientInfo t·ª´ UserId
                    const patientInfo = await this.getPatientByUserId(user.userId)
                    patientInfos.push(patientInfo)
                } catch (err) {
                    // Patient not found in Patient table, skip
                }
            }

            return patientInfos
        } catch (err: any) {
            console.error('‚ùå [ERROR] Failed to search patients:', err)
            throw err
        }
    }
}

export const patientService = new PatientService()
export type { UserDto, PatientInfoDto, SearchUserRequest, SearchUserResponse }
